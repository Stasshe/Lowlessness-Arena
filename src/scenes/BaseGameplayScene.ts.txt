
import Phaser from 'phaser';
import { GameManager } from '../managers/GameManager';
import { Player } from '../objects/Player';
import { CharacterType } from '../characters/CharacterFactory';
import { SkillType } from '../objects/Player';
import { GameEffects } from '../utils/GameEffects';
import { InputController } from '../controllers/InputController';

/**
 * TrainingSceneとOnlineGameSceneで共通する基本的なゲームプレイ機能を提供する基本クラス
 */
export abstract class BaseGameplayScene extends Phaser.Scene {
  protected gameManager!: GameManager;
  protected gameEffects!: GameEffects;
  protected inputController?: InputController;
  protected selectedCharacterType: CharacterType = CharacterType.DEFAULT;
  protected isGameStarted: boolean = false;
  protected isGameOver: boolean = false;

  constructor(key: string) {
    super(key);
  }

  /**
   * 共通アセットのロード
   */
  protected loadCommonAssets(): void {
    // タイルセット
    this.load.image('grass', 'assets/tiles/grass.png');
    this.load.image('wall', 'assets/tiles/wall.png');
    this.load.image('boundary', 'assets/tiles/boundary.png');
    this.load.image('bush', 'assets/tiles/bush.png');
    this.load.image('spawn', 'assets/tiles/spawn.png');
    
    // UIアセット
    this.load.image('button', 'assets/ui/button.png');
    this.load.image('healthbar', 'assets/ui/healthbar.png');
    this.load.image('joystick', 'assets/ui/joystick.png');
    this.load.image('joystick-base', 'assets/ui/joystick-base.png');
    
    // プレイヤーアセット
    this.load.image('player', 'assets/characters/player.png');
    this.load.image('bullet', 'assets/weapons/bullet.png');
    
    // デフォルトアセット
    this.load.image('default', 'assets/default.png');
  }

  /**
   * ゲーム環境の初期セットアップ
   */
  protected setupGameEnvironment(): void {
    try {
      console.log("BaseGameplayScene setupGameEnvironment start");
      
      // ゲームマネージャーを初期化
      this.gameManager = new GameManager(this);
      this.gameEffects = new GameEffects(this);
      
      console.log("Game manager and effects initialized");
    } catch (error) {
      console.error("Error in setupGameEnvironment:", error);
    }
  }
  
  /**
   * プレイヤーの作成
   */
  protected createPlayerCharacter(characterType: CharacterType, x: number, y: number): Player {
    const player = this.gameManager.createPlayer(characterType, x, y);
    if (!player) {
      throw new Error('プレイヤーの作成に失敗しました');
    }
    
    // カメラをプレイヤーに追従
    this.cameras.main.startFollow(player);
    
    return player;
  }
  
  /**
   * UI要素の作成
   */
  protected createUIElements(): void {
    if (!this.gameManager) return;
    
    // UI作成
    this.gameManager.createUI();
    
    // モバイルならジョイスティックを作成
    if (this.gameManager.isMobile()) {
      this.gameManager.createJoysticks();
    }
    
    // スキルクールダウン表示を作成
    this.gameManager.createSkillCooldownDisplay();
  }
  
  /**
   * スキル使用時のエフェクト表示
   */
  protected showSkillEffect(type: SkillType, x: number, y: number): void {
    if (!this.gameEffects) return;
    this.gameEffects.showSkillEffect(type, x, y);
  }
  
  /**
   * 衝突判定の設定
   */
  protected setupBaseCollisions(): void {
    if (!this.gameManager) return;
    
    const player = this.gameManager.getPlayer();
    if (!player) return;
    
    const map = this.gameManager.getMap();
    if (!map || !map.getWalls()) return;
    
    // プレイヤーと壁の衝突
    this.physics.add.collider(player, map.getWalls());
  }
  
  /**
   * 茂みの判定処理
   */
  protected updateBushInteractions(): void {
    if (!this.gameManager) return;
    
    const player = this.gameManager.getPlayer();
    if (!player) return;
    
    const map = this.gameManager.getMap();
    if (!map) return;
    
    // プレイヤーが茂みに入ったかを判定
    if (map.isInBush(player)) {
      player.enterBush();
    } else {
      player.exitBush();
    }
  }
  
  /**
   * 入力処理の更新
   */
  protected updatePlayerInput(): void {
    if (!this.gameManager) return;
    
    const player = this.gameManager.getPlayer();
    if (!player) return;
    
    const inputController = this.gameManager.getInputController();
    if (inputController) {
      inputController.update();
    } else {
      // 移動ジョイスティックがある場合はそれを使用
      const moveJoystick = this.gameManager.getMoveJoystick();
      if (moveJoystick) {
        const moveVector = moveJoystick.getVector();
        player.move(moveVector.x, moveVector.y);
      } else {
        // キーボードの入力処理
        const cursors = this.gameManager.getCursors();
        if (cursors) {
          const directionX = Number(cursors.right.isDown) - Number(cursors.left.isDown);
          const directionY = Number(cursors.down.isDown) - Number(cursors.up.isDown);
          player.move(directionX, directionY);
        }
      }
    }
  }
  
  /**
   * ゲームの状態更新
   */
  protected updateGameState(_time: number, _delta: number): void {
    // 子クラスで実装
  }
  
  /**
   * UIの更新
   */
  protected updateUI(): void {
    if (!this.gameManager) return;
    
    const ui = this.gameManager.getUI();
    if (ui) {
      ui.update();
    }
  }
  
  /**
   * メッセージ表示用ヘルパーメソッド
   */
  protected showMessage(text: string, duration: number = 2000): void {
    const message = this.add.text(
      this.cameras.main.width / 2,
      this.cameras.main.height / 3,
      text,
      {
        fontSize: '28px',
        color: '#ffffff',
        stroke: '#000000',
        strokeThickness: 4,
        fontStyle: 'bold'
      }
    )
    .setOrigin(0.5)
    .setScrollFactor(0)
    .setDepth(1000)
    .setAlpha(0);
    
    // フェードインアニメーション
    this.tweens.add({
      targets: message,
      alpha: 1,
      y: this.cameras.main.height / 3 - 20,
      duration: 500,
      ease: 'Power2',
      onComplete: () => {
        // フェードアウト
        this.tweens.add({
          targets: message,
          alpha: 0,
          delay: duration,
          duration: 500,
          ease: 'Power2',
          onComplete: () => {
            message.destroy();
          }
        });
      }
    });
  }

  /**
   * ゲーム終了時の処理
   */
  protected endGame(isVictory: boolean): void {
    if (!this.gameEffects) return;
    
    this.isGameOver = true;
    
    // 勝利/敗北エフェクトの表示
    if (isVictory) {
      this.gameEffects.showVictoryEffect();
    } else {
      this.gameEffects.showDefeatEffect();
    }
  }

  /**
   * リソースのクリーンアップ
   */
  protected cleanupResources(): void {
    if (this.gameManager) {
      this.gameManager.destroy();
    }
  }

  /**
   * シーンのシャットダウン処理
   */
  shutdown(): void {
    this.cleanupResources();
    if (this.physics.world) {
      this.physics.world.shutdown();
    }
  }
  
  /**
   * シーンの破棄処理
   */
  destroy(): void {
    this.cleanupResources();
    if (this.physics.world) {
      this.physics.world.destroy();
    }
  }
}
